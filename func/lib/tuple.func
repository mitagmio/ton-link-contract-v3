tuple tuple::delete(tuple a) impure {
        tuple temp_tuple_for_save = unsafe_tuple([]);
        repeat(a.tuple_length() - 1){
                temp_tuple_for_save = temp_tuple_for_save.tpush(a~tpop());
        }
        tuple result_tuple = unsafe_tuple([]);
        repeat(temp_tuple_for_save.tuple_length()){
                result_tuple = result_tuple.tpush(temp_tuple_for_save~tpop()); 
        }
        return result_tuple;
}

int tuple::get_random_number(int max) impure {
        randomize_lt();
        int temp = rand(max);
        return temp;
}

int tuple::get_by_count(tuple a, int count) impure {
        int res = 0;
        repeat(count + 1){
                res = a.first();
                a = tuple::delete(a);
        }
        return res;
}

tuple tuple::replace(tuple a, int count, int new) impure {
        tuple temp_tuple = unsafe_tuple([]);
        repeat(a.tuple_length() - (count + 1)){
                temp_tuple = temp_tuple.tpush(a~tpop());
        }
        tuple result_tuple = unsafe_tuple([]);
        int trash = a~tpop();
        a = a.tpush(new);
        repeat(temp_tuple.tuple_length()){
               a = a.tpush(temp_tuple~tpop()); 
        }
        return a;

}

int tuple::in_tuple(tuple a, int n, int length) impure {
        int i = 0;
        repeat(length){
                int temp = tuple::get_by_count(a, i);
                if(n == temp) {
                        return -1;
                }
                i = i + 1;
        }
        return 0;
}

tuple tuple::match_check(tuple a, int max) impure {
        {-int i = 0;
        while(i != 5){
                int j = i + 1;
                while(j != 5){
                        if((tuple::get_by_count(a, i)) == (tuple::get_by_count(a, j))){
                                int new = tuple::get_by_count(a, i);
                                while((tuple::get_by_count(a, i)) == new){
                                        new = tuple::get_random_number(max);
                                }
                                a = tuple::replace(a, j, new);
                        }
                        j = j + 1;
                }
                i = i + 1;
        }
        return a;-}

        int i = 0;
        repeat(a.tuple_length()){
                int temp = tuple::get_by_count(a, i);
                int key = 0;
                while(key == 0){
                        int temp_check = tuple::in_tuple(a, temp, a.tuple_length());
                        if(temp_check == -1){
                                temp = tuple::get_random_number(max);
                        } else {
                                a = tuple::replace(a, i, temp);
                                i = i + 1;
                                key = -1;
                        }
                }
        }
        return a;

}